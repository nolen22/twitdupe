// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String    @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  threads       Thread[]
  likes         Like[]
  reposts       Repost[]
  replies       Reply[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Thread {
  id          String   @id @default(cuid())
  content     String
  authorId    String?
  author      User?    @relation(fields: [authorId], references: [id])
  likes       Like[]
  reposts     Repost[]
  replies     Reply[]
  likesCount  Int      @default(0)
  repostCount Int      @default(0)
  replyCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorName  String   @default("Anonymous")
  authorImage String   @default("https://api.dicebear.com/7.x/avataaars/svg?seed=anonymous")
  parentId    String?
  parent      Thread?  @relation("ThreadToThread", fields: [parentId], references: [id])
  childThreads Thread[] @relation("ThreadToThread")
}

model Like {
  id        String   @id @default(cuid())
  threadId  String
  userId    String
  thread    Thread   @relation(fields: [threadId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([threadId, userId], name: "threadId_userId")
}

model Repost {
  id        String   @id @default(cuid())
  threadId  String
  userId    String
  thread    Thread   @relation(fields: [threadId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([threadId, userId], name: "threadId_userId")
}

model Reply {
  id        String   @id @default(cuid())
  content   String
  threadId  String
  userId    String
  thread    Thread   @relation(fields: [threadId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 